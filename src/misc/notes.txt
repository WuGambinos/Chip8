Systems memory map:

  0x000-0x1FF - Chip 8 Interpreter (contains font set in emulator)

  0x050 - 0x0A0 - Used for th ebuild in 4x5 pixel font set

  0x200 - 0xFFF - Program ROM to work RAM


OverFlow Checking:

	EX for opcode 0x8XY4
	EX. 0x8E64

	y = (opcode & 0x00F0) // sets y = 0x60
	V[y >> 4] // We do this to bring make the hex digit the LSB EX.   Turn 0x60 to 0x06 so we get the actual value of the digit


	x = (opcode & 0x0F00) // Sets x = 0xE00
	V[x >> 8] // Same logic as before, We do this to make the hex digit the LSB. Ex. Turn 0xE00 to 0x00E
	//But this time we used 8 instead of 4 cause we need to shift it farther to right in order to make it the LSB


Display:
	 ______________
	|(0,0)	(63,0) |
	|(0,31)	(63,31)|
	|______________|
	
	Chip-8 draws graphics on screen through the use of sprites. 
	A sprite is a group of bytes which are a binary representation of the desired picture. 
	Chip-8 sprites may be up to 15 bytes, for a possible sprite size of 8x15.
	
	Programs may also refer to a group of sprites representing the hexadecimal digits 0 through F
	The data should be stored in the interpreter area of Chip-8 memory (0x000 to 0x1FF). 
	

		


TODO:

  Implement Display - (0xD000)

  Implement Key Reading - (0xE000)

  Need to make fucntions for all the instructions instead of having one big switch statement
